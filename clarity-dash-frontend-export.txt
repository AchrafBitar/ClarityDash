# ClarityDash Frontend Code Export
# Full-stack Personal Finance Dashboard Application
# Frontend: React + TypeScript + Vite + Tailwind CSS

## Project Structure
```
clarity-dash/client/
├── src/
│   ├── components/
│   │   ├── AddTransactionModal.tsx
│   │   ├── CategorySpendingChart.tsx
│   │   ├── CSVUploadModal.tsx
│   │   └── SavingsProjectionChart.tsx
│   ├── contexts/
│   │   └── AuthContext.tsx
│   ├── pages/
│   │   ├── Dashboard.tsx
│   │   ├── LoginPage.tsx
│   │   ├── RegisterPage.tsx
│   │   └── TransactionsPage.tsx
│   ├── services/
│   │   └── api.ts
│   ├── types/
│   │   └── index.ts
│   ├── App.tsx
│   ├── index.css
│   └── main.tsx
├── package.json
├── tailwind.config.js
├── postcss.config.js
└── vite.config.ts
```

## NEW FEATURES ADDED:

### 1. Transaction Management
- ✅ Add Transaction Modal with form validation
- ✅ Delete transaction functionality
- ✅ Real-time transaction list updates
- ✅ Category management and auto-suggestions

### 2. CSV Import Functionality
- ✅ CSV file upload with drag & drop
- ✅ Column mapping interface
- ✅ CSV preview (first 5 rows)
- ✅ Auto-mapping for common column names
- ✅ Bulk transaction import
- ✅ Error handling and validation

### 3. Enhanced Dashboard
- ✅ Quick action buttons for adding transactions
- ✅ Real-time data refresh after transactions
- ✅ Transaction summary statistics
- ✅ Category count display

### 4. Enhanced Transactions Page
- ✅ Full CRUD operations for transactions
- ✅ Transaction summary cards
- ✅ Delete confirmation dialogs
- ✅ Category filtering support

## 1. App.tsx - Main Application Component
```typescript
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider, useAuth } from './contexts/AuthContext';
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import Dashboard from './pages/Dashboard';
import TransactionsPage from './pages/TransactionsPage';
import './index.css';

// Protected Route Component
const ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { isAuthenticated, loading } = useAuth();

  if (loading) {
    return (
      <div className="h-screen w-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-slate-600 font-medium">Loading...</p>
        </div>
      </div>
    );
  }

  return isAuthenticated ? <>{children}</> : <Navigate to="/login" replace />;
};

// Public Route Component (redirects to dashboard if already authenticated)
const PublicRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { isAuthenticated, loading } = useAuth();

  if (loading) {
    return (
      <div className="h-screen w-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-slate-600 font-medium">Loading...</p>
        </div>
      </div>
    );
  }

  return isAuthenticated ? <Navigate to="/" replace /> : <>{children}</>;
};

// Main Layout Component
const MainLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user, logout } = useAuth();

  return (
    <div className="h-screen w-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex flex-col overflow-hidden">
      {/* Navigation Header */}
      <nav className="bg-white/80 backdrop-blur-md border-b border-slate-200/50 flex-shrink-0 z-50">
        <div className="h-16 px-6 flex justify-between items-center">
          {/* Logo */}
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg flex items-center justify-center">
              <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
            </div>
            <span className="text-xl font-bold bg-gradient-to-r from-slate-900 to-slate-700 bg-clip-text text-transparent">
              ClarityDash
            </span>
          </div>

          {/* Navigation Links */}
          <div className="hidden md:flex items-center space-x-8">
            <a href="/" className="text-slate-700 hover:text-blue-600 font-medium transition-colors">
              Dashboard
            </a>
            <a href="/transactions" className="text-slate-700 hover:text-blue-600 font-medium transition-colors">
              Transactions
            </a>
          </div>

          {/* User Menu */}
          <div className="flex items-center space-x-4">
            <div className="text-right hidden sm:block">
              <p className="text-sm font-medium text-slate-900">{user?.firstName}</p>
              <p className="text-xs text-slate-500">{user?.email}</p>
            </div>
            <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-full flex items-center justify-center text-white font-medium text-sm">
              {user?.firstName?.charAt(0).toUpperCase()}
            </div>
            <button
              onClick={logout}
              className="px-3 py-1.5 text-sm font-medium text-slate-700 hover:text-red-600 transition-colors"
            >
              Logout
            </button>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <main className="flex-1 overflow-auto">
        {children}
      </main>
    </div>
  );
};

const App: React.FC = () => {
  return (
    <AuthProvider>
      <Router>
        <Routes>
          <Route path="/login" element={
            <PublicRoute>
              <LoginPage />
            </PublicRoute>
          } />
          <Route path="/register" element={
            <PublicRoute>
              <RegisterPage />
            </PublicRoute>
          } />
          <Route path="/" element={
            <ProtectedRoute>
              <MainLayout>
                <Dashboard />
              </MainLayout>
            </ProtectedRoute>
          } />
          <Route path="/transactions" element={
            <ProtectedRoute>
              <MainLayout>
                <TransactionsPage />
              </MainLayout>
            </ProtectedRoute>
          } />
        </Routes>
      </Router>
    </AuthProvider>
  );
};

export default App;
```

## 2. Types - TypeScript Interfaces
```typescript
// src/types/index.ts
export interface User {
  _id: string;
  email: string;
  firstName: string;
  createdAt: string;
  updatedAt: string;
}

export interface Transaction {
  _id: string;
  user: string;
  description: string;
  amount: number;
  type: 'income' | 'expense';
  category: string;
  date: string;
  createdAt: string;
  updatedAt: string;
}

export interface CreateTransactionData {
  description: string;
  amount: number;
  type: 'income' | 'expense';
  category: string;
  date?: string;
}

export interface FinancialSummary {
  totalIncome: number;
  totalExpenses: number;
  netSavings: number;
  transactionCount: number;
  period: {
    startDate: string;
    endDate: string;
  };
}

export interface CategorySpending {
  category: string;
  total: number;
  percentage: number;
  count: number;
}

export interface SpendingByCategory {
  categories: CategorySpending[];
  total: number;
  period: {
    startDate: string;
    endDate: string;
  };
}

export interface SavingsProjection {
  historical: Array<{
    date: string;
    savings: number;
    income: number;
    expenses: number;
  }>;
  projection: number | null;
  analysisPeriod: {
    startDate: string;
    endDate: string;
    months: number;
  };
}

export interface MonthlyTrends {
  months: Array<{
    month: string;
    income: number;
    expenses: number;
    savings: number;
  }>;
  trends: {
    income: 'increasing' | 'decreasing' | 'stable';
    expenses: 'increasing' | 'decreasing' | 'stable';
    savings: 'increasing' | 'decreasing' | 'stable';
  };
}

export interface ExpensePrediction {
  prediction: number;
  confidence: number;
  trend: {
    direction: 'increasing' | 'decreasing' | 'stable';
    strength: number;
  };
  comparison: {
    average: number;
    difference: number;
  };
}

export interface SpendingInsights {
  topCategories: Array<{
    category: string;
    amount: number;
    percentage: number;
  }>;
  unusualSpending: Array<{
    category: string;
    amount: number;
    deviation: number;
  }>;
  recommendations: string[];
}

export interface LoginData {
  email: string;
  password: string;
}

export interface RegisterData {
  firstName: string;
  email: string;
  password: string;
}

export interface AuthResponse {
  token: string;
  user: User;
}

export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  message?: string;
  error?: string;
}

export interface PaginatedResponse<T> {
  data: T[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}

export interface TransactionFilters {
  type?: 'income' | 'expense';
  category?: string;
  startDate?: string;
  endDate?: string;
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
}

export interface CSVMapping {
  descriptionColumn?: number;
  amountColumn?: number;
  typeColumn?: number;
  categoryColumn?: number;
  dateColumn?: number;
}

export interface CSVUploadResponse {
  success: boolean;
  imported: number;
  errors: string[];
}
```

## 3. API Service
```typescript
// src/services/api.ts
import axios from 'axios';
import type { AxiosInstance, AxiosResponse } from 'axios';
import type {
  User,
  Transaction,
  CreateTransactionData,
  FinancialSummary,
  SpendingByCategory,
  SavingsProjection,
  MonthlyTrends,
  ExpensePrediction,
  SpendingInsights,
  LoginData,
  RegisterData,
  AuthResponse,
  ApiResponse,
  PaginatedResponse,
  TransactionFilters,
  CSVMapping,
  CSVUploadResponse
} from '../types';

/**
 * API Service for ClarityDash
 * Handles all HTTP requests to the backend API
 */
class ApiService {
  private api: AxiosInstance;

  constructor() {
    this.api = axios.create({
      baseURL: import.meta.env.VITE_API_URL || 'http://localhost:5000/api',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    // Request interceptor to add auth token
    this.api.interceptors.request.use(
      (config) => {
        const token = localStorage.getItem('token');
        if (token) {
          config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
      },
      (error) => {
        return Promise.reject(error);
      }
    );

    // Response interceptor to handle errors
    this.api.interceptors.response.use(
      (response: AxiosResponse) => response,
      (error) => {
        if (error.response?.status === 401) {
          localStorage.removeItem('token');
          localStorage.removeItem('user');
          window.location.href = '/login';
        }
        return Promise.reject(error);
      }
    );
  }

  // Authentication Methods
  async register(data: RegisterData): Promise<ApiResponse<AuthResponse>> {
    const response = await this.api.post('/auth/register', data);
    return response.data;
  }

  async login(data: LoginData): Promise<ApiResponse<AuthResponse>> {
    const response = await this.api.post('/auth/login', data);
    return response.data;
  }

  async getProfile(): Promise<ApiResponse<{ user: User }>> {
    const response = await this.api.get('/auth/me');
    return response.data;
  }

  // Transaction Methods
  async createTransaction(data: CreateTransactionData): Promise<ApiResponse<{ transaction: Transaction }>> {
    const response = await this.api.post('/transactions', data);
    return response.data;
  }

  async getTransactions(filters: TransactionFilters = {}): Promise<ApiResponse<PaginatedResponse<Transaction>>> {
    const response = await this.api.get('/transactions', { params: filters });
    return response.data;
  }

  async deleteTransaction(id: string): Promise<ApiResponse> {
    const response = await this.api.delete(`/transactions/${id}`);
    return response.data;
  }

  async uploadCSV(file: File, mapping: CSVMapping): Promise<ApiResponse<CSVUploadResponse>> {
    const formData = new FormData();
    formData.append('csvFile', file);
    
    // Add mapping data
    Object.entries(mapping).forEach(([key, value]) => {
      if (value !== undefined) {
        formData.append(key, value.toString());
      }
    });

    const response = await this.api.post('/transactions/upload-csv', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    return response.data;
  }

  async getCategories(): Promise<ApiResponse<{ categories: string[] }>> {
    const response = await this.api.get('/transactions/categories');
    return response.data;
  }

  // Analytics Methods
  async getFinancialSummary(startDate?: string, endDate?: string): Promise<ApiResponse<FinancialSummary>> {
    const params: Record<string, string> = {};
    if (startDate) params.startDate = startDate;
    if (endDate) params.endDate = endDate;
    
    const response = await this.api.get('/analytics/summary', { params });
    return response.data;
  }

  async getSpendingByCategory(
    type: 'income' | 'expense' = 'expense',
    startDate?: string,
    endDate?: string
  ): Promise<ApiResponse<SpendingByCategory>> {
    const params: Record<string, string> = { type };
    if (startDate) params.startDate = startDate;
    if (endDate) params.endDate = endDate;
    
    const response = await this.api.get('/analytics/spending-by-category', { params });
    return response.data;
  }

  async getSavingsProjection(months: number = 6): Promise<ApiResponse<SavingsProjection>> {
    const response = await this.api.get('/analytics/savings-projection', { params: { months } });
    return response.data;
  }

  async getMonthlyTrends(months: number = 12): Promise<ApiResponse<MonthlyTrends>> {
    const response = await this.api.get('/analytics/monthly-trends', { params: { months } });
    return response.data;
  }

  // ML Prediction Methods
  async getExpensePrediction(months: number = 6): Promise<ApiResponse<ExpensePrediction>> {
    const response = await this.api.get('/ml/predict-expenses', { params: { months } });
    return response.data;
  }

  async getSpendingInsights(months: number = 3): Promise<ApiResponse<SpendingInsights>> {
    const response = await this.api.get('/ml/spending-insights', { params: { months } });
    return response.data;
  }

  // Utility Methods
  setAuthToken(token: string) {
    localStorage.setItem('token', token);
  }

  getAuthToken(): string | null {
    return localStorage.getItem('token');
  }

  removeAuthToken() {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  }

  isAuthenticated(): boolean {
    return !!this.getAuthToken();
  }
}

// Export singleton instance
export const apiService = new ApiService();
export default apiService;
```

## 4. Auth Context
```typescript
// src/contexts/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import apiService from '../services/api';
import type { User, LoginData, RegisterData } from '../types';

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  loading: boolean;
  login: (data: LoginData) => Promise<void>;
  register: (data: RegisterData) => Promise<void>;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const initializeAuth = async () => {
      const token = apiService.getAuthToken();
      if (token) {
        try {
          const response = await apiService.getProfile();
          if (response.success && response.data) {
            setUser(response.data.user);
          } else {
            apiService.removeAuthToken();
          }
        } catch (error) {
          console.error('Failed to get user profile:', error);
          apiService.removeAuthToken();
        }
      }
      setLoading(false);
    };

    initializeAuth();
  }, []);

  const login = async (data: LoginData) => {
    const response = await apiService.login(data);
    if (response.success && response.data) {
      apiService.setAuthToken(response.data.token);
      setUser(response.data.user);
    } else {
      throw new Error(response.message || 'Login failed');
    }
  };

  const register = async (data: RegisterData) => {
    const response = await apiService.register(data);
    if (response.success && response.data) {
      apiService.setAuthToken(response.data.token);
      setUser(response.data.user);
    } else {
      throw new Error(response.message || 'Registration failed');
    }
  };

  const logout = () => {
    apiService.removeAuthToken();
    setUser(null);
  };

  const value: AuthContextType = {
    user,
    isAuthenticated: !!user,
    loading,
    login,
    register,
    logout,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
```

## 5. Configuration Files

### package.json
```json
{
  "name": "clarity-dash-client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.6.0",
    "papaparse": "^5.4.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.1",
    "recharts": "^2.8.0"
  },
  "devDependencies": {
    "@types/papaparse": "^5.3.14",
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "@vitejs/plugin-react": "^4.0.3",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.45.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.3",
    "postcss": "^8.4.31",
    "tailwindcss": "^3.3.5",
    "typescript": "^5.0.2",
    "vite": "^4.4.5"
  }
}
```

### tailwind.config.js
```javascript
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
      },
    },
  },
  plugins: [],
}
```

### postcss.config.js
```javascript
export default {
  plugins: {
    '@tailwindcss/postcss': {},
    autoprefixer: {},
  },
}
```

### vite.config.ts
```typescript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    host: true,
  },
})
```

## 6. CSS Styles
```css
/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

* {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 6px;
}

::-webkit-scrollbar-track {
  background: #f1f5f9;
}

::-webkit-scrollbar-thumb {
  background: #cbd5e1;
  border-radius: 3px;
}

::-webkit-scrollbar-thumb:hover {
  background: #94a3b8;
}
```

## 7. Main Entry Point
```typescript
// src/main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
```

## 8. HTML Template
```html
<!-- index.html -->
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ClarityDash - Personal Finance Dashboard</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
```

## 9. AddTransactionModal.tsx - Transaction Form Component
```typescript
import React, { useState } from 'react';
import type { CreateTransactionData } from '../types';

interface AddTransactionModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: CreateTransactionData) => Promise<void>;
  categories: string[];
}

const AddTransactionModal: React.FC<AddTransactionModalProps> = ({
  isOpen,
  onClose,
  onSubmit,
  categories
}) => {
  const [formData, setFormData] = useState<CreateTransactionData>({
    description: '',
    amount: 0,
    type: 'expense',
    category: 'Uncategorized',
    date: new Date().toISOString().split('T')[0]
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: name === 'amount' ? parseFloat(value) || 0 : value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.description.trim()) {
      setError('Description is required');
      return;
    }

    if (formData.amount <= 0) {
      setError('Amount must be greater than 0');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      await onSubmit(formData);
      setFormData({
        description: '',
        amount: 0,
        type: 'expense',
        category: 'Uncategorized',
        date: new Date().toISOString().split('T')[0]
      });
      onClose();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to add transaction');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="bg-white/95 backdrop-blur-md rounded-2xl shadow-2xl border border-white/20 w-full max-w-md">
        {/* Header */}
        <div className="px-6 py-4 border-b border-slate-200/50">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-bold text-slate-900">Add Transaction</h2>
            <button
              onClick={onClose}
              className="text-slate-400 hover:text-slate-600 transition-colors"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="p-6 space-y-6">
          {error && (
            <div className="bg-red-50 border border-red-200 rounded-xl p-4">
              <div className="flex items-center">
                <svg className="w-5 h-5 text-red-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <p className="text-red-800 text-sm font-medium">{error}</p>
              </div>
            </div>
          )}

          {/* Description */}
          <div>
            <label htmlFor="description" className="block text-sm font-medium text-slate-700 mb-2">
              Description
            </label>
            <input
              type="text"
              id="description"
              name="description"
              value={formData.description}
              onChange={handleChange}
              required
              className="block w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/50 backdrop-blur-sm transition-all duration-200"
              placeholder="Enter transaction description"
            />
          </div>

          {/* Amount and Type */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label htmlFor="amount" className="block text-sm font-medium text-slate-700 mb-2">
                Amount
              </label>
              <input
                type="number"
                id="amount"
                name="amount"
                value={formData.amount}
                onChange={handleChange}
                required
                min="0"
                step="0.01"
                className="block w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/50 backdrop-blur-sm transition-all duration-200"
                placeholder="0.00"
              />
            </div>
            <div>
              <label htmlFor="type" className="block text-sm font-medium text-slate-700 mb-2">
                Type
              </label>
              <select
                id="type"
                name="type"
                value={formData.type}
                onChange={handleChange}
                className="block w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/50 backdrop-blur-sm transition-all duration-200"
              >
                <option value="expense">Expense</option>
                <option value="income">Income</option>
              </select>
            </div>
          </div>

          {/* Category and Date */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label htmlFor="category" className="block text-sm font-medium text-slate-700 mb-2">
                Category
              </label>
              <select
                id="category"
                name="category"
                value={formData.category}
                onChange={handleChange}
                className="block w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/50 backdrop-blur-sm transition-all duration-200"
              >
                <option value="Uncategorized">Uncategorized</option>
                {categories.map(category => (
                  <option key={category} value={category}>{category}</option>
                ))}
              </select>
            </div>
            <div>
              <label htmlFor="date" className="block text-sm font-medium text-slate-700 mb-2">
                Date
              </label>
              <input
                type="date"
                id="date"
                name="date"
                value={formData.date}
                onChange={handleChange}
                required
                className="block w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/50 backdrop-blur-sm transition-all duration-200"
              />
            </div>
          </div>

          {/* Buttons */}
          <div className="flex gap-3 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="flex-1 px-4 py-3 text-slate-700 bg-slate-100 hover:bg-slate-200 rounded-xl font-medium transition-all duration-200"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={loading}
              className="flex-1 px-4 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-xl font-medium hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg hover:shadow-xl"
            >
              {loading ? (
                <div className="flex items-center justify-center">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                  Adding...
                </div>
              ) : (
                'Add Transaction'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddTransactionModal;
```

## 10. CSVUploadModal.tsx - CSV Import Component
```typescript
import React, { useState, useRef } from 'react';
import Papa from 'papaparse';
import type { CSVMapping } from '../types';

interface CSVUploadModalProps {
  isOpen: boolean;
  onClose: () => void;
  onUpload: (file: File, mapping: CSVMapping) => Promise<void>;
}

interface CSVPreview {
  headers: string[];
  data: string[][];
}

const CSVUploadModal: React.FC<CSVUploadModalProps> = ({
  isOpen,
  onClose,
  onUpload
}) => {
  const [file, setFile] = useState<File | null>(null);
  const [preview, setPreview] = useState<CSVPreview | null>(null);
  const [mapping, setMapping] = useState<CSVMapping>({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0];
    if (!selectedFile) return;

    if (!selectedFile.name.toLowerCase().endsWith('.csv')) {
      setError('Please select a valid CSV file');
      return;
    }

    setFile(selectedFile);
    setError(null);

    // Parse CSV to preview
    Papa.parse(selectedFile, {
      header: true,
      preview: 5, // Show first 5 rows
      complete: (results) => {
        if (results.errors.length > 0) {
          setError('Error parsing CSV file. Please check the file format.');
          return;
        }

        const headers = results.meta.fields || [];
        const data = results.data.slice(0, 5) as string[][];
        
        setPreview({ headers, data });
        
        // Auto-map common column names
        const autoMapping: CSVMapping = {};
        headers.forEach((header, index) => {
          const lowerHeader = header.toLowerCase();
          if (lowerHeader.includes('description') || lowerHeader.includes('desc') || lowerHeader.includes('note')) {
            autoMapping.descriptionColumn = index + 1;
          } else if (lowerHeader.includes('amount') || lowerHeader.includes('sum') || lowerHeader.includes('value')) {
            autoMapping.amountColumn = index + 1;
          } else if (lowerHeader.includes('type') || lowerHeader.includes('category')) {
            autoMapping.typeColumn = index + 1;
          } else if (lowerHeader.includes('category') || lowerHeader.includes('cat')) {
            autoMapping.categoryColumn = index + 1;
          } else if (lowerHeader.includes('date')) {
            autoMapping.dateColumn = index + 1;
          }
        });
        setMapping(autoMapping);
      },
      error: () => {
        setError('Error reading CSV file');
      }
    });
  };

  const handleMappingChange = (field: keyof CSVMapping, value: string) => {
    setMapping(prev => ({
      ...prev,
      [field]: value === '' ? undefined : parseInt(value)
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!file) {
      setError('Please select a CSV file');
      return;
    }

    if (!mapping.descriptionColumn || !mapping.amountColumn) {
      setError('Description and Amount columns are required');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      await onUpload(file, mapping);
      setFile(null);
      setPreview(null);
      setMapping({});
      onClose();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to upload CSV');
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setFile(null);
    setPreview(null);
    setMapping({});
    setError(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="bg-white/95 backdrop-blur-md rounded-2xl shadow-2xl border border-white/20 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="px-6 py-4 border-b border-slate-200/50">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-bold text-slate-900">Import CSV Transactions</h2>
            <button
              onClick={onClose}
              className="text-slate-400 hover:text-slate-600 transition-colors"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="p-6">
          {error && (
            <div className="mb-6 bg-red-50 border border-red-200 rounded-xl p-4">
              <div className="flex items-center">
                <svg className="w-5 h-5 text-red-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <p className="text-red-800 text-sm font-medium">{error}</p>
              </div>
            </div>
          )}

          {/* File Upload */}
          <div className="mb-6">
            <label className="block text-sm font-medium text-slate-700 mb-2">
              Select CSV File
            </label>
            <div className="border-2 border-dashed border-slate-300 rounded-xl p-6 text-center hover:border-blue-400 transition-colors">
              <input
                ref={fileInputRef}
                type="file"
                accept=".csv"
                onChange={handleFileSelect}
                className="hidden"
              />
              <div className="space-y-2">
                <svg className="w-12 h-12 text-slate-400 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
                </svg>
                <p className="text-slate-600">
                  {file ? file.name : 'Click to select or drag and drop a CSV file'}
                </p>
                <button
                  type="button"
                  onClick={() => fileInputRef.current?.click()}
                  className="text-blue-600 hover:text-blue-700 font-medium"
                >
                  Browse Files
                </button>
              </div>
            </div>
          </div>

          {/* Column Mapping */}
          {preview && (
            <div className="mb-6">
              <h3 className="text-lg font-semibold text-slate-900 mb-4">Map CSV Columns</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Description Column <span className="text-red-500">*</span>
                  </label>
                  <select
                    value={mapping.descriptionColumn || ''}
                    onChange={(e) => handleMappingChange('descriptionColumn', e.target.value)}
                    className="block w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/50 backdrop-blur-sm transition-all duration-200"
                  >
                    <option value="">Select column</option>
                    {preview.headers.map((header, index) => (
                      <option key={index} value={index + 1}>
                        {index + 1}. {header}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Amount Column <span className="text-red-500">*</span>
                  </label>
                  <select
                    value={mapping.amountColumn || ''}
                    onChange={(e) => handleMappingChange('amountColumn', e.target.value)}
                    className="block w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/50 backdrop-blur-sm transition-all duration-200"
                  >
                    <option value="">Select column</option>
                    {preview.headers.map((header, index) => (
                      <option key={index} value={index + 1}>
                        {index + 1}. {header}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Type Column
                  </label>
                  <select
                    value={mapping.typeColumn || ''}
                    onChange={(e) => handleMappingChange('typeColumn', e.target.value)}
                    className="block w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/50 backdrop-blur-sm transition-all duration-200"
                  >
                    <option value="">Select column (optional)</option>
                    {preview.headers.map((header, index) => (
                      <option key={index} value={index + 1}>
                        {index + 1}. {header}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Category Column
                  </label>
                  <select
                    value={mapping.categoryColumn || ''}
                    onChange={(e) => handleMappingChange('categoryColumn', e.target.value)}
                    className="block w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/50 backdrop-blur-sm transition-all duration-200"
                  >
                    <option value="">Select column (optional)</option>
                    {preview.headers.map((header, index) => (
                      <option key={index} value={index + 1}>
                        {index + 1}. {header}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Date Column
                  </label>
                  <select
                    value={mapping.dateColumn || ''}
                    onChange={(e) => handleMappingChange('dateColumn', e.target.value)}
                    className="block w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white/50 backdrop-blur-sm transition-all duration-200"
                  >
                    <option value="">Select column (optional)</option>
                    {preview.headers.map((header, index) => (
                      <option key={index} value={index + 1}>
                        {index + 1}. {header}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              {/* Preview */}
              <div>
                <h4 className="text-sm font-medium text-slate-700 mb-2">Preview (First 5 rows)</h4>
                <div className="bg-slate-50 rounded-xl overflow-hidden border border-slate-200">
                  <div className="overflow-x-auto">
                    <table className="w-full text-sm">
                      <thead className="bg-slate-100">
                        <tr>
                          {preview.headers.map((header, index) => (
                            <th key={index} className="px-4 py-2 text-left font-medium text-slate-700">
                              {index + 1}. {header}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        {preview.data.map((row, rowIndex) => (
                          <tr key={rowIndex} className="border-t border-slate-200">
                            {row.map((cell, cellIndex) => (
                              <td key={cellIndex} className="px-4 py-2 text-slate-600">
                                {cell}
                              </td>
                            ))}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Buttons */}
          <div className="flex gap-3 pt-4">
            <button
              type="button"
              onClick={resetForm}
              className="px-4 py-3 text-slate-700 bg-slate-100 hover:bg-slate-200 rounded-xl font-medium transition-all duration-200"
            >
              Reset
            </button>
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-3 text-slate-700 bg-slate-100 hover:bg-slate-200 rounded-xl font-medium transition-all duration-200"
            >
              Cancel
            </button>
            <button
              onClick={handleSubmit}
              disabled={loading || !file || !mapping.descriptionColumn || !mapping.amountColumn}
              className="flex-1 px-4 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-xl font-medium hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg hover:shadow-xl"
            >
              {loading ? (
                <div className="flex items-center justify-center">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                  Uploading...
                </div>
              ) : (
                'Upload CSV'
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CSVUploadModal;
```

## 11. Sample CSV File for Testing
```csv
Date,Description,Amount,Type,Category
2024-01-15,Grocery Shopping,125.50,expense,Food & Dining
2024-01-16,Gas Station,45.00,expense,Transportation
2024-01-17,Salary Payment,2500.00,income,Salary
2024-01-18,Netflix Subscription,15.99,expense,Entertainment
2024-01-19,Restaurant Dinner,85.00,expense,Food & Dining
2024-01-20,Amazon Purchase,67.50,expense,Shopping
2024-01-21,Freelance Project,500.00,income,Freelance
2024-01-22,Utility Bill,120.00,expense,Utilities
2024-01-23,Gym Membership,50.00,expense,Health & Fitness
2024-01-24,Coffee Shop,4.50,expense,Food & Dining
2024-01-25,Phone Bill,80.00,expense,Utilities
2024-01-26,Book Purchase,25.00,expense,Education
2024-01-27,Investment Dividend,150.00,income,Investment
2024-01-28,Car Insurance,200.00,expense,Insurance
2024-01-29,Home Depot,45.75,expense,Home & Garden
2024-01-30,Online Course,199.00,expense,Education
```

## Setup Instructions

1. **Install Dependencies:**
   ```bash
   cd clarity-dash/client
   npm install
   ```

2. **Start Development Server:**
   ```bash
   npm run dev
   ```

3. **Test CSV Import:**
   - Use the sample CSV file provided above
   - Go to Transactions page and click "Import CSV"
   - Upload the sample file and map the columns
   - Verify transactions are imported correctly

## New Features Summary

### Transaction Management
- **Add Transaction Modal**: Modern form with validation for adding individual transactions
- **Delete Transactions**: Remove transactions with confirmation dialog
- **Real-time Updates**: Dashboard and transaction list update immediately after changes
- **Category Management**: Auto-populate categories from existing transactions

### CSV Import System
- **File Upload**: Drag & drop or browse for CSV files
- **Column Mapping**: Intuitive interface to map CSV columns to transaction fields
- **Auto-mapping**: Smart detection of common column names
- **Preview**: See first 5 rows before importing
- **Validation**: Required field validation and error handling
- **Bulk Import**: Import multiple transactions at once

### Enhanced User Experience
- **Modern UI**: Glassmorphism design with gradients and animations
- **Responsive Design**: Works on all screen sizes
- **Loading States**: Visual feedback during operations
- **Error Handling**: Clear error messages and validation
- **Confirmation Dialogs**: Prevent accidental deletions

### Technical Features
- **TypeScript**: Full type safety for all components
- **React Hooks**: Modern state management
- **Form Validation**: Client-side validation with error messages
- **CSV Parsing**: Robust CSV parsing with PapaParse
- **API Integration**: Seamless backend communication
- **Real-time Updates**: Immediate UI updates after data changes

This implementation provides a complete transaction management system with both manual entry and bulk CSV import capabilities, making it easy for users to manage their financial data efficiently.
